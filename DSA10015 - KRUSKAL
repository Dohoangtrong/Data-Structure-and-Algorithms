#include<bits/stdc++.h>
using namespace std;
int v, e;
struct edge{
	int u, v, w;
};
vector<edge> adj;

istream& operator >> (istream& in, edge& a){
	in >> a.u >> a.v >> a.w;
	return in;
}

int parent[105];

int find(int u){
	if ( u == parent[u] ) return u;
	int b = find(parent[u]);
	return b;
}

bool union_set(int u, int v){
	u = find(u);
	v = find(v);
	if ( u == v ) return false;
	if ( u < v ) parent[v] = u;
	else parent[u] = v;
	return true;
}

bool operator < (edge& a, edge& b){
	return a.w < b.w;
}

void kruskal(){
	vector<edge> mst;
	int d = 0;
	for ( int i = 0; i < e; i++){
		if ( mst.size() == v-1 ) break;
		if (union_set(adj[i].u,adj[i].v)){
			mst.push_back(adj[i]);
			d += adj[i].w;
		}
	}
	cout << d << endl;
}

main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	int t;
	cin >> t;
	while(t--){
		int a, b, w;
		cin >> v >> e;
		edge tm;
		for ( int i = 0; i < v; i++) parent[i] = i;
		for ( int i = 0; i < e; i++){
			cin >> tm;
			adj.push_back(tm);
		}
		sort(adj.begin(),adj.end());
		kruskal();
		adj.clear();
	}
}
